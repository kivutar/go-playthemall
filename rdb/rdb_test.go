package rdb

import (
	"reflect"
	"testing"
)

func TestEntry_SetField(t *testing.T) {
	type args struct {
		key       string
		value     string
		fieldName string
	}
	tests := []struct {
		name string
		args args
		want interface{}
	}{
		{
			name: "Sets the Name properly",
			args: args{key: "name", value: "Dragon Ball", fieldName: "Name"},
			want: "Dragon Ball",
		},
		{
			name: "Sets the CRC32 properly",
			args: args{key: "crc", value: string([]byte{213, 171, 215, 47}), fieldName: "CRC32"},
			want: uint32(3584808751),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			g := &Entry{}
			g.SetField(tt.args.key, tt.args.value)
			got := reflect.ValueOf(*g).FieldByName(tt.args.fieldName)
			if !reflect.DeepEqual(got.Interface(), tt.want) {
				t.Errorf("g.%v = %v, want %v", tt.args.fieldName, got, tt.want)
			}
		})
	}
}

func TestParse(t *testing.T) {
	type args struct {
		rdb []byte
	}
	tests := []struct {
		name string
		args args
		want RDB
	}{
		{
			name: "Parse a small RDB properly",
			args: args{rdb: sampleRDBBytes},
			want: sampleRDBParsed,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := Parse(tt.args.rdb); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Parse() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestDB_Find(t *testing.T) {
	type args struct {
		romPath string
		romName string
		CRC32   uint32
		games   chan (Entry)
	}
	tests := []struct {
		name string
		db   *DB
		args args
		want Entry
	}{
		{
			name: "Can find a game in a DB with a single RDB",
			db:   &DB{"Foo - Bar": sampleRDBParsed},
			args: args{
				romPath: "/foo/Urban Champion (Germany).bin",
				romName: "Urban Champion (Germany).bin",
				CRC32:   3577638060,
				games:   make(chan (Entry)),
			},
			want: Entry{
				System:  "Foo - Bar",
				Path:    "/foo/Urban Champion (Germany).bin",
				Name:    "Urban Champion (Germany)",
				ROMName: "Urban Champion (Germany).bin",
				Size:    uint64(0),
				CRC32:   uint32(3577638060),
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			go tt.db.Find(tt.args.romPath, tt.args.romName, tt.args.CRC32, tt.args.games)
			got := <-tt.args.games
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Find() = %v, want %v", got, tt.want)
			}
		})
	}
}

var sampleRDBParsed = RDB{
	{Name: "Urban Champion (Germany)", Description: "Urban Champion (Germany)", ROMName: "Urban Champion (Germany).bin", Size: uint64(32768), CRC32: uint32(3577638060)},
	{Name: "Tennis Master (Germany)", Description: "Tennis Master (Germany)", ROMName: "Tennis Master (Germany).bin", Size: uint64(32768), CRC32: uint32(1221862863)},
	{Name: "Space Castle (Germany)", Description: "Space Castle (Germany)", ROMName: "Space Castle (Germany).bin", Size: uint64(16384), CRC32: uint32(299316465)},
	{Name: "Pin Ball (Germany)", Description: "Pin Ball (Germany)", ROMName: "Pin Ball (Germany).bin", Size: uint64(32768), CRC32: uint32(4127180648)},
	{Name: "Kung Fu Challenge (Germany)", Description: "Kung Fu Challenge (Germany)", ROMName: "Kung Fu Challenge (Germany).bin", Size: uint64(32768), CRC32: uint32(1050699531)},
	{Name: "Hyper Space (Germany)", Description: "Hyper Space (Germany)", ROMName: "Hyper Space (Germany).bin", Size: uint64(32768), CRC32: uint32(2514538156)},
	{Name: "Go Bang (Germany)", Description: "Go Bang (Germany)", ROMName: "Go Bang (Germany).bin", Size: uint64(16384), CRC32: uint32(4255302886)},
	{Name: "Fuss-ball (Germany)", Description: "Fuss-ball (Germany)", ROMName: "Fuss-ball (Germany).bin", Size: uint64(32768), CRC32: uint32(1993297042)},
	{Name: "Falling Block! (Germany)", Description: "Falling Block! (Germany)", ROMName: "Falling Block! (Germany).bin", Size: uint64(8192), CRC32: uint32(1491339771)},
	{Name: "Dungeon Adventure (Germany)", Description: "Dungeon Adventure (Germany)", ROMName: "Dungeon Adventure (Germany).bin", Size: uint64(32768), CRC32: uint32(1622127797)},
	{Name: "Continental Galaxy 2020 (Germany)", Description: "Continental Galaxy 2020 (Germany)", ROMName: "Continental Galaxy 2020 (Germany).bin", Size: uint64(16384), CRC32: uint32(4276013525)},
}

var sampleRDBBytes = []byte{82, 65, 82, 67, 72, 68, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135, 164, 110, 97, 109, 101, 184, 85, 114, 98, 97, 110, 32, 67, 104, 97, 109, 112, 105, 111, 110, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 171, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 184, 85, 114, 98, 97, 110, 32, 67, 104, 97, 109, 112, 105, 111, 110, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 168, 114, 111, 109, 95, 110, 97, 109, 101, 188, 85, 114, 98, 97, 110, 32, 67, 104, 97, 109, 112, 105, 111, 110, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 46, 98, 105, 110, 164, 115, 105, 122, 101, 205, 128, 0, 163, 99, 114, 99, 196, 4, 213, 62, 108, 172, 163, 109, 100, 53, 196, 16, 5, 43, 78, 224, 129, 132, 177, 221, 162, 175, 98, 213, 178, 206, 196, 106, 164, 115, 104, 97, 49, 196, 20, 11, 234, 139, 18, 11, 60, 176, 33, 54, 81, 144, 16, 203, 33, 127, 208, 184, 25, 97, 125, 135, 164, 110, 97, 109, 101, 183, 84, 101, 110, 110, 105, 115, 32, 77, 97, 115, 116, 101, 114, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 171, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 183, 84, 101, 110, 110, 105, 115, 32, 77, 97, 115, 116, 101, 114, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 168, 114, 111, 109, 95, 110, 97, 109, 101, 187, 84, 101, 110, 110, 105, 115, 32, 77, 97, 115, 116, 101, 114, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 46, 98, 105, 110, 164, 115, 105, 122, 101, 205, 128, 0, 163, 99, 114, 99, 196, 4, 72, 212, 37, 207, 163, 109, 100, 53, 196, 16, 200, 160, 49, 4, 241, 78, 251, 130, 97, 67, 119, 37, 140, 147, 11, 110, 164, 115, 104, 97, 49, 196, 20, 8, 6, 66, 0, 149, 105, 215, 207, 219, 61, 26, 254, 12, 229, 49, 88, 66, 206, 74, 232, 135, 164, 110, 97, 109, 101, 182, 83, 112, 97, 99, 101, 32, 67, 97, 115, 116, 108, 101, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 171, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 182, 83, 112, 97, 99, 101, 32, 67, 97, 115, 116, 108, 101, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 168, 114, 111, 109, 95, 110, 97, 109, 101, 186, 83, 112, 97, 99, 101, 32, 67, 97, 115, 116, 108, 101, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 46, 98, 105, 110, 164, 115, 105, 122, 101, 205, 64, 0, 163, 99, 114, 99, 196, 4, 17, 215, 52, 241, 163, 109, 100, 53, 196, 16, 219, 111, 76, 82, 114, 214, 212, 0, 51, 155, 186, 228, 178, 122, 236, 168, 164, 115, 104, 97, 49, 196, 20, 107, 33, 58, 25, 252, 101, 233, 103, 177, 182, 190, 186, 76, 78, 158, 20, 145, 181, 146, 104, 135, 164, 110, 97, 109, 101, 178, 80, 105, 110, 32, 66, 97, 108, 108, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 171, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 178, 80, 105, 110, 32, 66, 97, 108, 108, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 168, 114, 111, 109, 95, 110, 97, 109, 101, 182, 80, 105, 110, 32, 66, 97, 108, 108, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 46, 98, 105, 110, 164, 115, 105, 122, 101, 205, 128, 0, 163, 99, 114, 99, 196, 4, 245, 255, 199, 104, 163, 109, 100, 53, 196, 16, 234, 7, 218, 116, 219, 28, 236, 146, 85, 84, 226, 22, 225, 138, 119, 173, 164, 115, 104, 97, 49, 196, 20, 26, 48, 230, 185, 105, 168, 243, 130, 78, 26, 174, 11, 190, 179, 141, 171, 188, 117, 218, 139, 135, 164, 110, 97, 109, 101, 187, 75, 117, 110, 103, 32, 70, 117, 32, 67, 104, 97, 108, 108, 101, 110, 103, 101, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 171, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 187, 75, 117, 110, 103, 32, 70, 117, 32, 67, 104, 97, 108, 108, 101, 110, 103, 101, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 168, 114, 111, 109, 95, 110, 97, 109, 101, 191, 75, 117, 110, 103, 32, 70, 117, 32, 67, 104, 97, 108, 108, 101, 110, 103, 101, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 46, 98, 105, 110, 164, 115, 105, 122, 101, 205, 128, 0, 163, 99, 114, 99, 196, 4, 62, 160, 103, 11, 163, 109, 100, 53, 196, 16, 157, 162, 51, 212, 206, 120, 38, 32, 99, 8, 124, 189, 114, 247, 199, 161, 164, 115, 104, 97, 49, 196, 20, 1, 100, 127, 135, 245, 159, 43, 5, 187, 70, 247, 189, 178, 250, 179, 139, 205, 142, 61, 110, 135, 164, 110, 97, 109, 101, 181, 72, 121, 112, 101, 114, 32, 83, 112, 97, 99, 101, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 171, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 181, 72, 121, 112, 101, 114, 32, 83, 112, 97, 99, 101, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 168, 114, 111, 109, 95, 110, 97, 109, 101, 185, 72, 121, 112, 101, 114, 32, 83, 112, 97, 99, 101, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 46, 98, 105, 110, 164, 115, 105, 122, 101, 205, 128, 0, 163, 99, 114, 99, 196, 4, 149, 224, 206, 172, 163, 109, 100, 53, 196, 16, 46, 199, 95, 205, 244, 236, 28, 135, 216, 98, 21, 202, 165, 210, 97, 147, 164, 115, 104, 97, 49, 196, 20, 179, 249, 94, 163, 219, 200, 129, 38, 46, 115, 74, 46, 53, 254, 180, 74, 29, 221, 86, 65, 135, 164, 110, 97, 109, 101, 177, 71, 111, 32, 66, 97, 110, 103, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 171, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 177, 71, 111, 32, 66, 97, 110, 103, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 168, 114, 111, 109, 95, 110, 97, 109, 101, 181, 71, 111, 32, 66, 97, 110, 103, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 46, 98, 105, 110, 164, 115, 105, 122, 101, 205, 64, 0, 163, 99, 114, 99, 196, 4, 253, 162, 196, 230, 163, 109, 100, 53, 196, 16, 194, 225, 152, 116, 60, 131, 254, 165, 181, 23, 108, 136, 17, 243, 52, 242, 164, 115, 104, 97, 49, 196, 20, 149, 156, 22, 177, 101, 113, 84, 187, 53, 44, 180, 214, 163, 225, 119, 215, 180, 104, 80, 198, 135, 164, 110, 97, 109, 101, 179, 70, 117, 115, 115, 45, 98, 97, 108, 108, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 171, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 179, 70, 117, 115, 115, 45, 98, 97, 108, 108, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 168, 114, 111, 109, 95, 110, 97, 109, 101, 183, 70, 117, 115, 115, 45, 98, 97, 108, 108, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 46, 98, 105, 110, 164, 115, 105, 122, 101, 205, 128, 0, 163, 99, 114, 99, 196, 4, 118, 207, 76, 146, 163, 109, 100, 53, 196, 16, 33, 237, 130, 231, 122, 199, 147, 144, 77, 34, 110, 47, 128, 222, 206, 200, 164, 115, 104, 97, 49, 196, 20, 164, 182, 231, 249, 142, 149, 62, 71, 245, 170, 66, 119, 82, 232, 169, 54, 231, 88, 43, 201, 135, 164, 110, 97, 109, 101, 184, 70, 97, 108, 108, 105, 110, 103, 32, 66, 108, 111, 99, 107, 33, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 171, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 184, 70, 97, 108, 108, 105, 110, 103, 32, 66, 108, 111, 99, 107, 33, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 168, 114, 111, 109, 95, 110, 97, 109, 101, 188, 70, 97, 108, 108, 105, 110, 103, 32, 66, 108, 111, 99, 107, 33, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 46, 98, 105, 110, 164, 115, 105, 122, 101, 205, 32, 0, 163, 99, 114, 99, 196, 4, 88, 228, 9, 251, 163, 109, 100, 53, 196, 16, 253, 9, 165, 143, 77, 205, 39, 93, 203, 197, 241, 212, 188, 47, 62, 9, 164, 115, 104, 97, 49, 196, 20, 246, 247, 227, 218, 227, 97, 251, 213, 109, 74, 132, 87, 216, 27, 180, 243, 130, 140, 72, 171, 135, 164, 110, 97, 109, 101, 187, 68, 117, 110, 103, 101, 111, 110, 32, 65, 100, 118, 101, 110, 116, 117, 114, 101, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 171, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 187, 68, 117, 110, 103, 101, 111, 110, 32, 65, 100, 118, 101, 110, 116, 117, 114, 101, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 168, 114, 111, 109, 95, 110, 97, 109, 101, 191, 68, 117, 110, 103, 101, 111, 110, 32, 65, 100, 118, 101, 110, 116, 117, 114, 101, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 46, 98, 105, 110, 164, 115, 105, 122, 101, 205, 128, 0, 163, 99, 114, 99, 196, 4, 96, 175, 180, 181, 163, 109, 100, 53, 196, 16, 128, 157, 242, 169, 85, 159, 106, 134, 12, 135, 127, 145, 73, 18, 170, 136, 164, 115, 104, 97, 49, 196, 20, 96, 72, 168, 74, 197, 165, 165, 26, 101, 34, 198, 98, 57, 142, 68, 205, 242, 147, 69, 136, 135, 164, 110, 97, 109, 101, 217, 33, 67, 111, 110, 116, 105, 110, 101, 110, 116, 97, 108, 32, 71, 97, 108, 97, 120, 121, 32, 50, 48, 50, 48, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 171, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 217, 33, 67, 111, 110, 116, 105, 110, 101, 110, 116, 97, 108, 32, 71, 97, 108, 97, 120, 121, 32, 50, 48, 50, 48, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 168, 114, 111, 109, 95, 110, 97, 109, 101, 217, 37, 67, 111, 110, 116, 105, 110, 101, 110, 116, 97, 108, 32, 71, 97, 108, 97, 120, 121, 32, 50, 48, 50, 48, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 46, 98, 105, 110, 164, 115, 105, 122, 101, 205, 64, 0, 163, 99, 114, 99, 196, 4, 254, 222, 201, 213, 163, 109, 100, 53, 196, 16, 203, 139, 90, 158, 111, 115, 252, 134, 220, 88, 55, 134, 148, 146, 232, 55, 164, 115, 104, 97, 49, 196, 20, 242, 175, 224, 158, 139, 99, 104, 207, 47, 185, 86, 175, 231, 253, 5, 81, 7, 249, 67, 238, 135, 164, 110, 97, 109, 101, 180, 66, 117, 98, 98, 108, 101, 32, 66, 111, 121, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 171, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 180, 66, 117, 98, 98, 108, 101, 32, 66, 111, 121, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 168, 114, 111, 109, 95, 110, 97, 109, 101, 184, 66, 117, 98, 98, 108, 101, 32, 66, 111, 121, 32, 40, 71, 101, 114, 109, 97, 110, 121, 41, 46, 98, 105, 110, 164, 115, 105, 122, 101, 205, 64, 0, 163, 99, 114, 99, 196, 4, 237, 208, 103, 157, 163, 109, 100, 53, 196, 16, 160, 60, 162, 4, 121, 255, 119, 110, 2, 23, 49, 62, 218, 254, 64, 71, 164, 115, 104, 97, 49, 196, 20, 95, 111, 129, 177, 165, 186, 109, 33, 229, 251, 91, 195, 138, 169, 238, 7, 112, 180, 107, 151, 192, 129, 165, 99, 111, 117, 110, 116, 204, 12}
